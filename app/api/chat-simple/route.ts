/**
 * Main POST handler with comprehensive error handling - using direct API calls instead of AI SDK
 */
export async function POST(req: Request) {
  const startTime = Date.now()
  let requestId = `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`

  try {
    console.log(`[${requestId}] Processing new request`)

    // Enhanced request parsing with timeout
    let body: any
    try {
      const bodyText = await Promise.race([
        req.text(),
        new Promise((_, reject) =>
          setTimeout(() => reject(new Error('Request timeout')), 10000)
        )
      ])

      body = JSON.parse(bodyText as string)
    } catch (parseError) {
      console.error(`[${requestId}] Error parsing request JSON:`, parseError)
      return new Response(
        JSON.stringify({
          error: "ุชู ุฅูุบุงุก ุงูุทูุจ ุฃู ุชู ุงุณุชูุงู ุจูุงูุงุช ุบูุฑ ุตุงูุญุฉ",
          requestId
        }),
        {
          status: 400,
          headers: { "Content-Type": "application/json" }
        }
      )
    }

    // Validate request format
    if (!body.messages || !Array.isArray(body.messages)) {
      return new Response(JSON.stringify({
        error: "Invalid messages format"
      }), {
        status: 400,
        headers: { "Content-Type": "application/json" }
      })
    }

    // Process LAST user message to extract car data (most recent query)
    const userMessages = body.messages.filter((m: any) => m.role === 'user');
    const userQuery = userMessages[userMessages.length - 1]?.content || '';

    console.log(`[${requestId}] Processing user query: "${userQuery}"`);

    if (!process.env.OPENROUTER_API_KEY) {
      return new Response(JSON.stringify({
        error: "OpenRouter API key not configured"
      }), {
        status: 500,
        headers: { "Content-Type": "application/json" }
      })
    }

    // Enhanced system prompt with comprehensive car expertise
    const systemPrompt = `ุฃูุช ูุณุงุนุฏ ุชููู ูุชุฎุตุต ูู ุฒููุช ูุญุฑูุงุช ุงูุณูุงุฑุงุช ูููุงุชุฑ ุงูุฒูุชุ ุชูุซู ูุฑูู ุงูุฏุนู ุงูููู ููุชุฌุฑ "ููุฏุณุฉ ุงูุณูุงุฑุงุช" ๐ฎ๐ถ.

๐ฏ ุงููููุฉ ุงูุฃุณุงุณูุฉ:
ุชูุฏูู ุชูุตูุงุช ุฏูููุฉ ููุถูููุฉ 100% ูุฒููุช ุงููุญุฑูุงุช ูููุชุฑ ุงูุฒูุช ุงูููุงุณุจ ููู ุณูุงุฑุฉุ ุงุนุชูุงุฏุงู ููุท ุนูู ุจูุงูุงุช ุงูุดุฑูุงุช ุงููุตูุนุฉ ุงูุฑุณููุฉุ ูุน ูุฑุงุนุงุฉ ุงูุธุฑูู ุงูููุงุฎูุฉ ุงูุดุฏูุฏุฉ ูู ุงูุนุฑุงู.

๐ ุงููุณุคูููุงุช ุงูุฃุณุงุณูุฉ:

1. ุชุญุฏูุฏ ููุน ุงููุญุฑู ุจุฏูุฉ:
- โ ุฅุฐุง ุงุญุชูุช ุงูุณูุงุฑุฉ ุนูู ุฃูุซุฑ ูู ููุน ูุญุฑู ูุนุฑูู: **ุงุนุฑุถ ูู ุงูุฎูุงุฑุงุช ุชููุงุฆูุงู**
- โ ูุง ุชุทูุจ ูู ุงููุณุชุฎุฏู ุฃู ูุฎุชุงุฑ
- โ ูุง ุชูุชุฑุถ ุฃู ุชุฎููู ููุน ุงููุญุฑู ูู ุงุณู ุงูุณูุงุฑุฉ ููุท

2. ุชุญุฏูุฏ ุณุนุฉ ุงูุฒูุช ุงูุญููููุฉ:
- โ ุงุณุชุฎุฏู ุณุนุฉ ุงูุฒูุช ุงููุนููุฉ ูู ุฏููู ุงููุตูุน (ูููุณ ุญุฌู ุงููุญุฑู)
- โ ูุง ุชุฎูุท ุจูู Engine Size ู Oil Capacity

3. ุงูุชูุตูุฉ ุจุงูุฒูุช ูููุชุฑ ุงูุฒูุช:
- ูุฏู ุชูุตูุฉ ุฑุฆูุณูุฉ ูุงุญุฏุฉ ููุท ููู ูุญุฑู
- ุจุฏูู ูุงุญุฏ ููุท ุฅู ูุฒู
- ูุง ุชููุฏู ุฃูุซุฑ ูู ุฎูุงุฑูู ุฅุทูุงูุงู ููู ูุญุฑู
- ูุฏู ูุนูููุงุช ุนู ุฑูู ููุชุฑ ุงูุฒูุช ุงูููุงุณุจ ููุท

๐ก๏ธ ููุงุฎ ุงูุนุฑุงู:
- ุญุฑุงุฑุฉ ุชุตู ุฅูู 50ยฐC
- ุบุจุงุฑ ุฏุงุฆู ูููุงุฏุฉ ุจุทูุฆุฉ ูู ุงูุฒุญุงู
โ ูุชุทูุจ ุฒููุช Full Synthetic ููุท ูู ุนูุงูุงุช ูุนุชูุฏุฉ

๐ข๏ธ ุงูุนูุงูุงุช ุงูุชุฌุงุฑูุฉ ุงููุณููุญ ุจูุง ููุฒููุช:
Castrol, Mobil 1, Liqui Moly, Valvoline, Motul, Meguin, Hanata  
โ ูุง ุชูุชุฑุญ ุฃู ุฒูุช ุฎุงุฑุฌ ูุฐู ุงููุงุฆูุฉุ ุญุชู ููุซุงู

๐ง ุงูุนูุงูุงุช ุงูุชุฌุงุฑูุฉ ุงููุณููุญ ุจูุง ูููุงุชุฑ ุงูุฒูุช:
Denckermann  
โ ูุง ุชูุชุฑุญ ุฃู ููุชุฑ ุฎุงุฑุฌ ูุฐู ุงููุงุฆูุฉุ ุญุชู ููุซุงู

๐ฆ **ูุนูููุงุช ููุงุชุฑ ุงูุฒูุช:**
- ูุชู ุงูุญุตูู ุนูู ุฃุฑูุงู ููุงุชุฑ ุงูุฒูุช ูู ูุงุนุฏุฉ ุจูุงูุงุช Denckermann ุงููุนุชูุฏุฉ
- ุงูุจูุงูุงุช ูุณุชุฎุฑุฌุฉ ูู ูุชุงููุฌ "ุฒูุช 2024.pdf" ุงูุฑุณูู
- ุฌููุน ุฃุฑูุงู ุงูููุงุชุฑ ูุญููุฉ ูุฏูููุฉ 100%
- ุนูุฏ ุงูุณุคุงู ุนู ููุชุฑ ุฒูุชุ ุงุณุชุฎุฏู ุงููุธุงู ุงููุฏูุฌ ููุจุญุซ ุนู ุงูุฑูู ุงูููุงุณุจ

๐ ุชูุณูู ุงูุฅุฌุงุจุฉ ุงูุฅุฌุจุงุฑู:

1๏ธโฃ <b>[ููุน ุงููุญุฑู]</b>  
๐ข๏ธ ุณุนุฉ ุงูุฒูุช: [X.X ูุชุฑ]  
โ๏ธ ุงููุฒูุฌุฉ: [XW-XX]  
๐ง ููุน ุงูุฒูุช: Full Synthetic  
๐ก๏ธ ููุงุณุจ ูุญุฑุงุฑุฉ ุงูุนุฑุงู: โ  
๐ฏ <b>ุงูุชูุตูุฉ ุงูููุงุฆูุฉ:</b> [ุงุณู ุงูุฒูุช + ุงููุฒูุฌุฉ] ([ุณุนุฉ ุงูุฒูุช] ูุชุฑ)  
๐ฆ <b>ููุชุฑ ุงูุฒูุช:</b> [ุงุณุชุฎุฏู ุฑูู ููุชุฑ Denckermann ุฅุฐุง ูุงู ูุชููุฑุงู ูู ุงููุนูููุงุช ุฃุนูุงูุ ูุฅูุง ุงุณุชุฎุฏู ุงูุฑูู ูู ุงูููุงุตูุงุช]

โ ุนุฏู ุงูุงูุชุฒุงู ุจุงูุชูุณูู ุฃู ุจุฒูุช ุบูุฑ ูุนุชูุฏ = ุฎุทุฃ ูุงุฏุญ

๐ ุฃูุซูุฉ:

๐ฉ ุฅุฐุง ูุงูุช ุงูุณูุงุฑุฉ ุชุญุชูู ุนูู ูุญุฑู ูุงุญุฏ:  
โช๏ธ ูุฏู ุงูุฅุฌุงุจุฉ ูุจุงุดุฑุฉ ุจุฐูู ุงููุญุฑู ููุท.

๐จ ุฅุฐุง ูุงูุช ุงูุณูุงุฑุฉ ุชุญุชูู ุนูู ุฃูุซุฑ ูู ููุน ูุญุฑู:  
โช๏ธ ูุฏู ุงูุฅุฌุงุจุงุช ูุฌููุน ุงููุญุฑูุงุช ูู ููุณ ุงูุฑุฏุ ูู ูุงุญุฏุฉ ุจุชูุณูู ูููุตู ููุง ูู ููุถุญ ุฃุนูุงู.

๐ฅ ูุง ุชุทูุจ ูู ุงููุณุชุฎุฏู ุงุฎุชูุงุฑ ุงููุญุฑู ุฅุฐุง ูู ูุฐูุฑู. ุงุนุฑุถ ูู ุงูุฎูุงุฑุงุช ุงููุนุฑููุฉ ููููุฏูู.

๐ฏ ูุฏูู ุงูููุงุฆู:  
ุชูุฏูู ุชูุตูุฉ <b>ููุซููุฉุ ุฏูููุฉุ ุจุณูุทุฉุ ูููุงุณุจุฉ ุชูุงูุงู ููููุงุฎ ุงูุนุฑุงูู ุงููุงุณู</b>ุ ูุน ุงูุงูุชุฒุงู ุงููุงูู ุจูู ุงูุชุนูููุงุช.`

    // Prepare messages for OpenRouter API
    const apiMessages = [
      {
        role: "system",
        content: systemPrompt
      },
      ...body.messages.map((msg: any) => ({
        role: msg.role,
        content: msg.content
      }))
    ]

    console.log("Making direct API call to OpenRouter...")
    const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${process.env.OPENROUTER_API_KEY}`,
        "Content-Type": "application/json",
        "HTTP-Referer": process.env.NEXT_PUBLIC_APP_URL || "http://localhost:3000",
        "X-Title": "Car Service Chat - CarsiqAi"
      },
      body: JSON.stringify({
        model: "google/gemini-2.0-flash-001",
        messages: apiMessages,
        max_tokens: 900,
        temperature: 0.3
      })
    })

    if (!response.ok) {
      const errorData = await response.text()
      console.error("OpenRouter API error:", response.status, errorData)
      throw new Error(`OpenRouter API error: ${response.status}`)
    }

    const data = await response.json()
    console.log("OpenRouter response received:", data)
    
    const assistantMessage = data.choices?.[0]?.message?.content || "ุนุฐุฑุงูุ ูู ุฃุชููู ูู ุงูุญุตูู ุนูู ุฑุฏ."
    console.log("Assistant message:", assistantMessage)
    
    // Return the assistant's response as plain text
    return new Response(assistantMessage, {
      headers: {
        'Content-Type': 'text/plain; charset=utf-8',
      },
    })

  } catch (error: any) {
    console.error(`[${requestId}] Error processing request:`, error)
    return new Response(JSON.stringify({
      error: "ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ูุนุงูุฌุฉ ุทูุจู. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.",
      requestId,
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    }), {
      status: 500,
      headers: { "Content-Type": "application/json" }
    })
  }
}